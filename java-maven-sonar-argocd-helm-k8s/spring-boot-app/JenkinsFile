pipeline {
    agent {
        // The agent section specifies where the entire Pipeline, or a specific stage, will execute in the Jenkins environment depending on where the agent section is placed
        docker {
            // Docker is a parameter, which support wide variety of use cases.

            image 'tiwarishivam/maven-docker-agent:v1'


            /* The image tag (maven-abhishek-docker-agent:v1) suggests it is a specialized agent image tailored for tasks involving Maven, which is a build automation 
            tool primarily used for Java projects.
            The v1 tag indicates this is the first version of the custom image. Updates or changes to the image would likely increment this version.
            */


            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'


            /* root user provide necessary permissions to the container to execute the commands. -v flag is used to mount the volume to the container.
            If Docker is properly installed and running on your host system, you should find the /var/run/docker.sock file already present. You can check this by
            running:ls -l /var/run/docker.sock
            */
        }
    }
    stages {
        stage('checkout') {
            //In this case, the stage is likely intended for checking out or retrieving the source code from a version control system, such as Git.
            steps {
                sh 'echo passes' //this shell command will simply output the word "passed" to the Jenkins console log when the stage runs.
                
                //git branch: 'main', url: 'https://github.com/ShivamTiwari05/Jenkins-Zero-To-Hero.git'

                /* The git step is used to retrieve the source code from a Git repository. The branch parameter specifies the branch to checkout, and the url parameter 
                specifies the URL of the Git repository.
                In this case, the branch is 'main' 
                */
                }
        }

        stage ('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'

                /* The mvn clean package command is a Maven command that cleans the project and packages the application into a distributable format, such as a JAR file.
                */
            }
        }
        stage ('SonarQube Analysis') {
            environment {
                SONAR_URL = "http://13.53.192.208:9000"

                // The SONAR_URL variable is used to store the URL of the SonarQube server.
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'

                    // The mvn sonar:sonar command is used to run the SonarQube analysis on the project. The -Dsonar.login flag specifies the SonarQube authentication token, and the -Dsonar.host.url flag specifies the SonarQube server URL.
                }
            }
        } 
        stage('Install Docker') {
            steps {
                sh 'apt-get update && apt-get install -y docker.io'
            }
        }


        stage ('buid and push docker image') {
            environment {
                DOCKER_IMAGE = "tiwarishivam/cicd:${BUILD_NUMBER}"
                
                // The DOCKER_Image variable is used to store the name of the Docker image that will be built and pushed to Docker Hub.

                REGISTRY_CREDENTIALS = credentials('docker-cred')

                // The Registry_Credentials variable is used to store the Docker Hub credentials needed to push the Docker image.
            }
            steps {
                script {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'


                    /* The docker build command is used to build the Docker image from the Dockerfile in the project directory.
                    docker build: This command is used to build a Docker image from the contents of a directory, using a Dockerfile to define the image configuration
                    -t $(DOCKER_Image): The -t flag is used to tag the resulting image with a name. $(DOCKER_Image) is a placeholder (in this case, a shell variable) for the name of the Docker
                    image you want to create. For example, it might be something like abhishekf5/ultimate-cicd:latest.
                    The dot refers to the current directory where the Docker build context is located
                    */

                    def dockerImage = docker.image("${DOCKER_IMAGE}")

                    // The docker.image step is used to create a Docker image object from the specified image name.

                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()

                        // The dockerImage.push() command is used to push the Docker image to Docker Hub with the tag latest.
                    }
                }
            }
        }
        stage ('update deployment file') {
            environment {

                // The environment section is used to define environment variables that will be available to all steps within the stage.

                GIT_USER_NAME = "ShivamTiwari05"
                GIT_REPO_NAME = "Jenkins-Zero-To-Hero"

                // The GIT_USER_NAME and GIT_REPO_NAME variables are used to store the GitHub username and repository name, respectively.
            }
            steps {
                    checkout scm
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                        git config --global --add safe.directory /var/lib/jenkins/workspace/CICD-app
                        git config --global --add safe.directory '*'
                        ls -a
                        git status
                        git config user.email "kumarshivam1895@gmail.com"
                        git config user.name "ShivamTiwari05"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment with new image tag"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''

                    // The deploymentFile variable is used to store the path to the Kubernetes deployment file.
                    }
            }
        }



    }    
}
